/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace HoloToolkit.XTools {

public class ClientConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ClientConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ClientConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ClientConfig() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          XToolsClientPINVOKE.delete_ClientConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public ClientConfig(ClientRole role) : this(XToolsClientPINVOKE.new_ClientConfig((int)role), true) {
  }

  public ClientRole GetRole() {
    ClientRole ret = (ClientRole)XToolsClientPINVOKE.ClientConfig_GetRole(swigCPtr);
    return ret;
  }

  public string GetServerAddress() {
    string ret = XToolsClientPINVOKE.ClientConfig_GetServerAddress(swigCPtr);
    return ret;
  }

  public bool SetServerAddress(string serverAddress) {
    bool ret = XToolsClientPINVOKE.ClientConfig_SetServerAddress(swigCPtr, serverAddress);
    if (XToolsClientPINVOKE.SWIGPendingException.Pending) throw XToolsClientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetServerPort() {
    int ret = XToolsClientPINVOKE.ClientConfig_GetServerPort(swigCPtr);
    return ret;
  }

  public bool SetServerPort(int port) {
    bool ret = XToolsClientPINVOKE.ClientConfig_SetServerPort(swigCPtr, port);
    return ret;
  }

  public LogWriter GetLogWriter() {
    global::System.IntPtr cPtr = XToolsClientPINVOKE.ClientConfig_GetLogWriter(swigCPtr);
    LogWriter ret = (cPtr == global::System.IntPtr.Zero) ? null : new LogWriter(cPtr, false);
    return ret;
  }

  public void SetLogWriter(LogWriter logger) {
    XToolsClientPINVOKE.ClientConfig_SetLogWriter(swigCPtr, LogWriter.getCPtr(logger));
  }

  public bool GetIsAudioEndpoint() {
    bool ret = XToolsClientPINVOKE.ClientConfig_GetIsAudioEndpoint(swigCPtr);
    return ret;
  }

  public void SetIsAudioEndpoint(bool isAudioEndpoint) {
    XToolsClientPINVOKE.ClientConfig_SetIsAudioEndpoint(swigCPtr, isAudioEndpoint);
  }

}

}
